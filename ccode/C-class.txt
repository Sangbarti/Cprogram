#include<stdio.h>

C- Source code(memory allocated during static allocation)
	|
	|
	|------>preprocessor(accept the source code as input, interpreing special purpose directory 	|			denoted by #)
	|
	|
Expanded Source Code(reads the whole code line by line by compiler)
	|
	|
	|------>complier(translate code to assembly code, anaylize the expandable source code)
	|	
	|
assembly code
	|
	|
	|------>assembler(create an object code, MSDOS, .obj)
	|
	|

relocating object code		object of library function
	|				|	
	|				|
	|				|
	|				|
	|				|
	_________________________________________________
				|
				|
				|-->linker(after linking these files it make a executable .exe code)
				|
				|
			Executable Code(here memory is allocated during dynamic allocation)
	Loader load this file in OS then main function called




153  length of the number raised to its digit

1^3+5^3+3^3 = 153

1. input
2. find the length of the number
3. calculate
4. compair input and calculate result



n = 5
i=0 1 2 3 4  i<n

i=1 2 3 4 5 i<=n/ i<(n+1)

cube(x) x*x*x
cube(1+2)
1+2*1+2*1+2

1+2+2+2

7





#include<stdio.h>
#define MAN(x, y) ((x)>(y)) ? (x):(y);

int main()
{
    int i=10, j=5, k=0;
    k = MAN(++i, j++);
    printf("%d, %d, %d\n", i, j, k);
    return 0;
}


	10
k = (++i>j++)	?	++i	:	j++
	11>5		12
i = 12
j =  6
k = 12


#include<stdio.h>
#define JOIN(s1, s2) 
int main()
{
    char *str1="India";
    char *str2="BIX";
    printf("%s=%s %s=%s \n", s1, s1, #s2, s2);
    return 0;
}


#include<stdio.h>
#define FUN(arg) do\
                 {\
                    if(arg)\
                        printf("IndiaBIX...", "\n");\
                  }while(--i)

int main()
{
    int i=2;
    FUN(i<3){
	do
                 {\
                    if(i<3)
                        printf("IndiaBIX...", "\n");
                  }while(--i)
}
    return 0;
}


#include<stdio.h>
#define MAX(a, b) (a > b ? a : b)

int main()
{
    int x;
    x = MAX(3+2, 2+7);
    printf("%d\n", x);
    return 0;
} 





#include <stdio.h>

int main( int argc, char *argv[] )  {

   if( argc == 2 ) {
      printf("The argument supplied is %s\n", argv[1]);
   }
   else if( argc > 2 ) {
      printf("Too many arguments supplied.\n");
   }
   else {
      printf("One argument expected.\n");
   }
}


scanf("%d",&a);
      int, adress of the variable where the value has been stored
printf("%d",&a);




*a
*b
&a = 20;
*b= *a; 


FFFA +2 

FFFC